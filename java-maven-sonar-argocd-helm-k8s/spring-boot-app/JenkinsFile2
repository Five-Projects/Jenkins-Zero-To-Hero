pipeline{
    agent{
        docker{
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }
    stages{
        stage ('Checkout'){
            steps {
            sh 'echo passed'
                }
        }
        stage ('Build and Test'){
            steps{
                // build the project code and create a JAR file
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage ('Static Code Analysis'){
            environment {
                SONAR_URL = "http://65.1.134.89:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'Sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                     sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage ('Docker build and push image'){
            environment {
                DOCKER_IMAGE = "mnidevops/springboot-web-application:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('DockerHub')
            }
            steps {
                script{
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                def dockerImage = docker.image("${DOCKER_IMAGE}")
                docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
    }
    }
    }
}
